// Generated by gencpp from file ur10_mover/ExecutionServiceRequest.msg
// DO NOT EDIT!


#ifndef UR10_MOVER_MESSAGE_EXECUTIONSERVICEREQUEST_H
#define UR10_MOVER_MESSAGE_EXECUTIONSERVICEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ur10_mover
{
template <class ContainerAllocator>
struct ExecutionServiceRequest_
{
  typedef ExecutionServiceRequest_<ContainerAllocator> Type;

  ExecutionServiceRequest_()
    : joint_states()  {
    }
  ExecutionServiceRequest_(const ContainerAllocator& _alloc)
    : joint_states(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _joint_states_type;
  _joint_states_type joint_states;





  typedef boost::shared_ptr< ::ur10_mover::ExecutionServiceRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ur10_mover::ExecutionServiceRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ExecutionServiceRequest_

typedef ::ur10_mover::ExecutionServiceRequest_<std::allocator<void> > ExecutionServiceRequest;

typedef boost::shared_ptr< ::ur10_mover::ExecutionServiceRequest > ExecutionServiceRequestPtr;
typedef boost::shared_ptr< ::ur10_mover::ExecutionServiceRequest const> ExecutionServiceRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ur10_mover::ExecutionServiceRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ur10_mover::ExecutionServiceRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ur10_mover::ExecutionServiceRequest_<ContainerAllocator1> & lhs, const ::ur10_mover::ExecutionServiceRequest_<ContainerAllocator2> & rhs)
{
  return lhs.joint_states == rhs.joint_states;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ur10_mover::ExecutionServiceRequest_<ContainerAllocator1> & lhs, const ::ur10_mover::ExecutionServiceRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ur10_mover

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ur10_mover::ExecutionServiceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ur10_mover::ExecutionServiceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ur10_mover::ExecutionServiceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ur10_mover::ExecutionServiceRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ur10_mover::ExecutionServiceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ur10_mover::ExecutionServiceRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ur10_mover::ExecutionServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "18daa018b134e4579f9295193c5b21fc";
  }

  static const char* value(const ::ur10_mover::ExecutionServiceRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x18daa018b134e457ULL;
  static const uint64_t static_value2 = 0x9f9295193c5b21fcULL;
};

template<class ContainerAllocator>
struct DataType< ::ur10_mover::ExecutionServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ur10_mover/ExecutionServiceRequest";
  }

  static const char* value(const ::ur10_mover::ExecutionServiceRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ur10_mover::ExecutionServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] joint_states\n"
;
  }

  static const char* value(const ::ur10_mover::ExecutionServiceRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ur10_mover::ExecutionServiceRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.joint_states);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ExecutionServiceRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ur10_mover::ExecutionServiceRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ur10_mover::ExecutionServiceRequest_<ContainerAllocator>& v)
  {
    s << indent << "joint_states[]" << std::endl;
    for (size_t i = 0; i < v.joint_states.size(); ++i)
    {
      s << indent << "  joint_states[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.joint_states[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // UR10_MOVER_MESSAGE_EXECUTIONSERVICEREQUEST_H
